// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package rdb is a generated GoMock package.
package rdb

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	rdb "github.com/nokamoto/demo20-apps/internal/mysql/rdb"
	reflect "reflect"
)

// MockclusterQuery is a mock of clusterQuery interface
type MockclusterQuery struct {
	ctrl     *gomock.Controller
	recorder *MockclusterQueryMockRecorder
}

// MockclusterQueryMockRecorder is the mock recorder for MockclusterQuery
type MockclusterQueryMockRecorder struct {
	mock *MockclusterQuery
}

// NewMockclusterQuery creates a new mock instance
func NewMockclusterQuery(ctrl *gomock.Controller) *MockclusterQuery {
	mock := &MockclusterQuery{ctrl: ctrl}
	mock.recorder = &MockclusterQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockclusterQuery) EXPECT() *MockclusterQueryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockclusterQuery) Create(tx *gorm.DB, cluster *rdb.Cluster, instanceIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, cluster, instanceIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockclusterQueryMockRecorder) Create(tx, cluster, instanceIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockclusterQuery)(nil).Create), tx, cluster, instanceIDs)
}
