// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package rdb is a generated GoMock package.
package rdb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha "github.com/nokamoto/demo20-apis/cloud/compute/v1alpha"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockinstanceClient is a mock of instanceClient interface
type MockinstanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockinstanceClientMockRecorder
}

// MockinstanceClientMockRecorder is the mock recorder for MockinstanceClient
type MockinstanceClientMockRecorder struct {
	mock *MockinstanceClient
}

// NewMockinstanceClient creates a new mock instance
func NewMockinstanceClient(ctrl *gomock.Controller) *MockinstanceClient {
	mock := &MockinstanceClient{ctrl: ctrl}
	mock.recorder = &MockinstanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockinstanceClient) EXPECT() *MockinstanceClientMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method
func (m *MockinstanceClient) CreateInstance(ctx context.Context, in *v1alpha.CreateInstanceRequest, opts ...grpc.CallOption) (*v1alpha.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInstance", varargs...)
	ret0, _ := ret[0].(*v1alpha.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance
func (mr *MockinstanceClientMockRecorder) CreateInstance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockinstanceClient)(nil).CreateInstance), varargs...)
}
