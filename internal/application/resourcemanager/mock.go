// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package resourcemanager is a generated GoMock package.
package resourcemanager

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	resourcemanager "github.com/nokamoto/demo20-apps/internal/mysql/resourcemanager"
	reflect "reflect"
)

// MockprojectQuery is a mock of projectQuery interface
type MockprojectQuery struct {
	ctrl     *gomock.Controller
	recorder *MockprojectQueryMockRecorder
}

// MockprojectQueryMockRecorder is the mock recorder for MockprojectQuery
type MockprojectQueryMockRecorder struct {
	mock *MockprojectQuery
}

// NewMockprojectQuery creates a new mock instance
func NewMockprojectQuery(ctrl *gomock.Controller) *MockprojectQuery {
	mock := &MockprojectQuery{ctrl: ctrl}
	mock.recorder = &MockprojectQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectQuery) EXPECT() *MockprojectQueryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockprojectQuery) Get(tx *gorm.DB, id string) (*resourcemanager.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, id)
	ret0, _ := ret[0].(*resourcemanager.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockprojectQueryMockRecorder) Get(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockprojectQuery)(nil).Get), tx, id)
}
