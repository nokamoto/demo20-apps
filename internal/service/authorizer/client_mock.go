// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package authorizer is a generated GoMock package.
package authorizer

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha "github.com/nokamoto/demo20-apis/cloud/iam/admin/v1alpha"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// Mockclient is a mock of client interface
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// AuthorizeMachineUser mocks base method
func (m *Mockclient) AuthorizeMachineUser(ctx context.Context, in *v1alpha.AuthorizeMachineUserRequest, opts ...grpc.CallOption) (*v1alpha.AuthorizeMachineUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthorizeMachineUser", varargs...)
	ret0, _ := ret[0].(*v1alpha.AuthorizeMachineUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeMachineUser indicates an expected call of AuthorizeMachineUser
func (mr *MockclientMockRecorder) AuthorizeMachineUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeMachineUser", reflect.TypeOf((*Mockclient)(nil).AuthorizeMachineUser), varargs...)
}
